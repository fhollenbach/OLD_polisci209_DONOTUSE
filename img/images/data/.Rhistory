s <- errors^2
m <- sum(s)/length(errors)
r <- sqrt(m)
print(r)
sqrt(sum(residuals(model1)^2)/length(errors)) # r.m.s. error
library(tidyverse)
glimpse(gamson)
glimpse(cfb)
cfb1 <- subset(cfb, Name == "Donnel Pumphrey")
cfb1
cfb[1,]
cfb1 <- subset(cfb, Name == "Donnel Pumphrey, San Diego St. (Mountain West)")
cfb1
pres <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/Presdata.csv")
glimpse(pres)
data2016 <- subset(pres, Year == 2016)
data2016
mod <- lm(inc1 ~  Z, data = pres)
coef(mod)
predict(mod, data = data2016 )
help(predcit)
help(predict)
prediction <- predict(mod, newdata = data2016 )
prediction
###load our favorite library
### think of loaning a book
library(tidyverse)
## we have to do it everytime we start R anew and want to use the program
#### again, make sure we have the correct path specified to our data file
gamson <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/gamson.csv")
### remember this looks different on windows
### for example: read_csv("C:\\Users\\fhollenbach\\Desktop\\class209\\gamson.csv")
### let's take a look at the data
glimpse(gamson)
#### seat share is the share of seats each party holds in a parliament
#### portfolio share is the share of cabinet seats a party has in government
#### Gamson's law says that a party's seat share in parliament should (almost) perfectly predict the share of seats in the cabinet (coalition government)
#### if that is the case, what should the correlation be?
ggplot(data = gamson, aes(x = seat_share, y = portfolio_share)) +  geom_point()
ggsave("~/Dropbox/TAMU/Teaching/Fall2017/slides/week6/gamson1.pdf")
### wow that looks like a very strong correlation
### Gamson's law
### can we calculate the correlation in R by hand?
deviation_squared <- (gamson$seat_share - mean(gamson$seat_share))^2
summed_deviation2 <- sum(deviation_squared)
avg_deviation2 <- summed_deviation2/length(gamson$seat_share)
sd_seatshare <- sqrt(avg_deviation2)
sd(gamson$seat_share)
##all in one
sd_portfolio <- sqrt(sum((gamson$portfolio_share - mean(gamson$portfolio_share))^2)/length(gamson$portfolio_share))
seatshare_su <- (gamson$seat_share - mean(gamson$seat_share))/sd_seatshare
portfolio_su <- (gamson$portfolio_share - mean(gamson$portfolio_share))/sd_portfolio
sum(seatshare_su*portfolio_su)/length(gamson$portfolio_share)
### wow, that's almost 1!!!!
##### some fun data from cfb 2016-17
cfb <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/CollegeFB.csv")
glimpse(cfb)
### create some new variables in our dataset, based on the variables already included in the data
cfb$yards_carry <- cfb$Yards/cfb$Attempts
cfb$TDs_carry <- cfb$TDs/cfb$Attempts
### simple scatter plot
ggplot(cfb, aes(x = Attempts, y = Yards)) + geom_point()
### note that ggplot tells us about missing values
#### how about we add the point of averages?
ggplot(cfb, aes(x = Attempts, y = Yards)) + geom_point() + geom_point(aes(x = mean(cfb$Attempts, na.rm = T), y = mean(cfb$Yards, na.rm = T)), color = "blue")
### but scatter plots can only show us two variables, one on the y-axis, one on the x-axis
### Can we use color to see a third? Yes
ggplot(cfb, aes(x = Attempts, y = Yards, color = TDs)) + geom_point()
### we can use the size of points to see a fourth
ggplot(cfb, aes(x = Attempts, y = Yards, color = TDs, size = TDs_carry)) + geom_point()
### though really this is not recommended, might be better off making multiple plots than clutter one plot with too much information
######## correlation
#### remember all the hard work we had to do to get the correlation?
#### well, R also has a function for that
### remember to call on the variables in the data set, i.e. dataframe.name$variable.name
cor(gamson$seat_share, gamson$portfolio_share)
##### if you have missing data, the correlation returns NA
cor(cfb$Yards, cfb$Attempts)
help(cor)
### we need to tell R what to do about the missing values
### unfortunately na.rm = T doesn't work here
### we can tell R only to use those where both variables are not missing
cor(cfb$Yards, cfb$Attempts, use = "pairwise.complete.obs")
correlation <- cor(gamson$seat_share, gamson$portfolio_share)
correlation <- cor(gamson$seat_share, gamson$portfolio_share)
(sd(gamson$portfolio_share)/sd(gamson$seat_share))*correlation
model1 <- lm(portfolio_share ~ seat_share, data = gamson)
coef(model1)
ggplot(gamson, aes(x = seat_share, y = portfolio_share)) +  geom_point()
ggplot(gamson, aes(x = seat_share, y = portfolio_share)) +  geom_point() + geom_point(aes(x = mean(gamson$seat_share), y = mean(gamson$portfolio_share)), color = "red")
ggplot(gamson, aes(x = seat_share, y = portfolio_share)) +  geom_point() + geom_point(aes(x = mean(gamson$seat_share), y = mean(gamson$portfolio_share)), color = "red") + geom_smooth(method = "lm", se = FALSE, color = "red")
ggplot(gamson, aes(x = seat_share, y = portfolio_share)) +  geom_point() + geom_point(aes(x = mean(gamson$seat_share), y = mean(gamson$portfolio_share)), color = "red") + geom_smooth(method = "lm", se = FALSE, color = "pink")
ggplot(gamson, aes(x = seat_share, y = portfolio_share)) +  geom_point() + geom_point(aes(x = mean(gamson$seat_share), y = mean(gamson$portfolio_share)), color = "red") + geom_smooth(method = "lm", se = FALSE, color = "blue")
ggplot(gamson, aes(x = seat_share, y = portfolio_share)) +  geom_point(alpha = 0.3) + geom_point(aes(x = mean(gamson$seat_share), y = mean(gamson$portfolio_share)), color = "red") + geom_smooth(method = "lm", se = FALSE, color = "red")
residuals(model1)
residuals(model1)
### these are all the errors/residuals for each point in our dataset
errors <- residuals(model1)
s <- errors^2
m <- sum(s)/length(errors)
r <- sqrt(m)
print(r)
pres <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/Presdata.csv")
glimpse(pres)
mod <- lm(inc1 ~  Z, data = pres)
coef(mod)
data2016 <- subset(pres, Year == 2016)
data2016
prediction <- predict(mod, newdata = data2016 )
prediction
pres <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/Presdata.csv")
e^(pres$LogTWH)
exp(pres$LogTWH)
pres$LogTWH
sample(100, c(0,1), replace = TRUE)
help("sample")
sample( c(0,1), 100,replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 100, replace = TRUE)
sum(samp)
sums <- rep(NA, 1000)
for(i in 1:1000){
samp <- sample( c(0,1), 100, replace = TRUE)
sum(samp)
sums <- rep(NA, 1000)
for(i in 1:1000){
samp <- sample( c(0,1), 100, replace = TRUE)
sums[i] <- sum(samp)
}
}
}}
#### what is the expected value
sums <- rep(NA, 1000)
for(i in 1:1000){
samp <- sample( c(0,1), 100, replace = TRUE)
sums[i] <- sum(samp)
}
sums
draws <- data.frame(sums,iter)
iter <- seq(1,1000,1)
draws <- data.frame(sums,iter)
draws
names(draws)
ggplot(data  = draws, aes = (x = sums, y = ..density..)) + geom_histogram()
ggplot(data  = draws, aes = (x = sums, y = ..density..)) + geom_histogram()
ggplot(data  = draws, aes = (x = sums, y = ..density..)) + geom_hist()
library(ggplot2)
ggplot(data  = draws, aes = (x = sums, y = ..density..))
ggplot2(data  = draws, aes = (x = sums, y = ..density..))
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
samp <- sample( c(0,1), 500, replace = TRUE)
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,1), 500, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
for(i in 1:1000){
samp <- sample( c(0,1), 1000, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,1), 1000, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
ggplot(data = draws, aes(x = sums,  y = ..density..)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
library(ggplot2)
help("sample")
sample(c(0,1), 10, replace = TRUE)
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,1), 10, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
draws
View(draws)
View(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(1,2,3,4,5,6), 10, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(1,2,3,4,5,6), 100, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(1,2,3,4,5,6), 500, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(1,2,3,4,5,6), 1000, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,0,0,0,0,1), 10, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,0,0,0,0,1), 100, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,0,0,0,0,1), 1000, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
sample()
help(sample)
sample(c(0,1), 1, replace = TRUE)
sample(c(0,1), 10, replace = TRUE)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
samp <- sample( c(0,1), 10, replace = TRUE)
sum(samp)
#### what is the expected value
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,1), 10, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
library(ggplot2)
#### what is the expected value
sums <- rep(NA, 1000)
iter <- seq(1,1000,1)
for(i in 1:1000){
samp <- sample( c(0,1), 10, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
samp <- sample( c(0,1), 100, replace = TRUE)
samp
for(i in 1:1000){
samp <- sample( c(0,1), 100, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
for(i in 1:1000){
samp <- sample( c(0,1), 500, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
for(i in 1:1000){
samp <- sample( c(0,1), 1000, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
for(i in 1:1000){
samp <- sample( c(0,0,0,0,0,1), 10, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
for(i in 1:1000){
samp <- sample( c(0,0,0,0,0,1), 100, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
for(i in 1:1000){
samp <- sample( c(0,0,0,0,0,1), 1000, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
for(i in 1:1000){
samp <- sample( c(1,2,3,4,5,6), 10, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
samp <- sample( c(1,2,3,4,5,6), 1000, replace = TRUE)
sums[i] <- sum(samp)
for(i in 1:1000){
samp <- sample( c(1,2,3,4,5,6), 1000, replace = TRUE)
sums[i] <- sum(samp)
}
draws <- data.frame(sums,iter)
names(draws)
ggplot(data = draws, aes(x = sums)) + geom_histogram() ###aes is the aesthetic argument, here we tell ggplot we want logged GDP on the x-axis
pres <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/Presdata.csv")
glimpse(pres)
mod <- lm(inc1 ~  Z, data = pres)
coef(mod)
data2016 <- subset(pres, Year == 2016)
#### prediction
prediction <- predict(mod, newdata = data2016 )
pres <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/Presdata.csv")
glimpse(pres)
mod <- lm(inc1 ~  Z, data = pres)
coef(mod)
data2016 <- subset(pres, Year == 2016)
#### prediction
prediction <- predict(mod, newdata = data2016 )
pres <- read.csv("~/Documents/GitHub/polisci209_fall2017/img/images/data/Presdata.csv")
glimpse(pres)
mod <- lm(inc1 ~  Z, data = pres)
coef(mod)
data2016 <- subset(pres, Year == 2016)
#### prediction
prediction <- predict(mod, newdata = data2016 )
print(prediction)
population <- c(rep(0, 500000), rep(1, 500000),  rep(2, 500000))
table(population)
population <- c(rep(0, 500000), rep(1, 200000),  rep(2, 500000))
table(population)
survey_sample <- sample(population, 1000, replace = FALSE)
table(survey_sample)
427/573
500000/700000
devtools::install_github("ajdamico/lodown")
library(lodown)
install.packages("data.table")
library(data.table)
donations_committee <- fread("~/Dropbox/TaxationBrazil/JOP_submission/RR/Donations/2008/Comitê/Receita/ReceitaComitê.csv", header = TRUE)
donations <- fread("~/Dropbox/TaxationBrazil/JOP_submission/RR/Donations/2008/Candidato/Receita/ReceitaCandidato.csv", header = T)
donations_mayors <- donations[ which(donations$DS_CARGO=="Prefeito"), ]
rm(donations)
head(donations_mayors)
save(donations_mayors, file ="~/Dropbox/TaxationBrazil/JOP_submission/RR/Donations/2008/Candidato/Receita/donations_mayors.rda" )
donations_committee <- fread("~/Dropbox/TaxationBrazil/JOP_submission/RR/Donations/2008/Comitê/Receita/ReceitaComitê.csv", header = TRUE)
######## simulating survey sampling
## 0 is Dem
## 1 is Rep
population <- c(rep(0, 700000), rep(1, 400000))
table(population)
Population_percent = (length(subset(population, population == 0))/length(population))*100
Population_percent
Draws <- 1000
survey_sample1 <- sample(population, Draws, replace = FALSE)
table(survey_sample1)
expected_value1 <- length(subset(survey_sample1, survey_sample1 == 0))/length(survey_sample1)
expected_value1
SE1 <- sqrt(Draws)*sqrt(expected_value1 * (1- expected_value1))
SE1 <- SE1*100/Draws
SE1
63.2- (2*1.52)
63.2+(2*1.52)
for(i in 1:1000){
survey_sample <- sample(population, Draws, replace = FALSE)
expected_value <- length(subset(survey_sample, survey_sample == 0))/length(survey_sample)
expected_value
SE <- sqrt(Draws)*sqrt(expected_value * (1- expected_value))
SE <- SE*100/Draws
lower <- expected_value*100 - 2*SE
upper <- expected_value*100 + 2*SE
In95CI[i] <- (lower <= Population_percent & upper >= Population_percent)
}
iter <- seq(1,1000,1)
In95CI <- rep(NA, 1000)
for(i in 1:1000){
survey_sample <- sample(population, Draws, replace = FALSE)
expected_value <- length(subset(survey_sample, survey_sample == 0))/length(survey_sample)
expected_value
SE <- sqrt(Draws)*sqrt(expected_value * (1- expected_value))
SE <- SE*100/Draws
lower <- expected_value*100 - 2*SE
upper <- expected_value*100 + 2*SE
In95CI[i] <- (lower <= Population_percent & upper >= Population_percent)
}
In95CI
sum(In95CI)
iter <- seq(1,10000,1)
In95CI <- rep(NA, 10000)
for(i in 1:10000){
survey_sample <- sample(population, Draws, replace = FALSE)
expected_value <- length(subset(survey_sample, survey_sample == 0))/length(survey_sample)
expected_value
SE <- sqrt(Draws)*sqrt(expected_value * (1- expected_value))
SE <- SE*100/Draws
lower <- expected_value*100 - 2*SE
upper <- expected_value*100 + 2*SE
In95CI[i] <- (lower <= Population_percent & upper >= Population_percent)
}
sum(In95CI)
population <- c(rep(0, 700000), rep(1, 400000))
table(population)
Population_percent = (length(subset(population, population == 0))/length(population))*100
Population_percent
Draws <- 1000
survey_sample1 <- sample(population, Draws, replace = FALSE)
table(survey_sample1)
632/1000
expected_value1 <- length(subset(survey_sample1, survey_sample1 == 0))/length(survey_sample1)
expected_value1
SE1 <- sqrt(Draws)*sqrt(expected_value1 * (1- expected_value1))
SE1 <- SE1*100/Draws
SE1
iter <- seq(1,1000,1)
In95CI <- rep(NA, 1000)
for(i in 1:1000){
survey_sample <- sample(population, Draws, replace = FALSE)
expected_value <- length(subset(survey_sample, survey_sample == 0))/length(survey_sample)
expected_value
SE <- sqrt(Draws)*sqrt(expected_value * (1- expected_value))
SE <- SE*100/Draws
lower <- expected_value*100 - 2*SE
upper <- expected_value*100 + 2*SE
In95CI[i] <- (lower <= Population_percent & upper >= Population_percent)
}
In95CI
sum(In95CI)
iter <- seq(1,10000,1)
In95CI <- rep(NA, 10000)
for(i in 1:10000){
survey_sample <- sample(population, Draws, replace = FALSE)
expected_value <- length(subset(survey_sample, survey_sample == 0))/length(survey_sample)
expected_value
SE <- sqrt(Draws)*sqrt(expected_value * (1- expected_value))
SE <- SE*100/Draws
lower <- expected_value*100 - 2*SE
upper <- expected_value*100 + 2*SE
In95CI[i] <- (lower <= Population_percent & upper >= Population_percent)
}
sum(In95CI)
setwd("~/Documents/GitHub/polisci209_fall2017/img/images/data")
dat <- read.csv("guns.csv")
lm(dat$firearm_death_rate ~ lawtotal)
lm(dat$firearm_death_rate ~ totallaw)
View(dat)
names(dat)
lm(dat$firearm_death_rate ~ dat$lawtotal)
fit <- lm(firearm_death_rate ~ immunity + gunshow, data = dat)
summary(git)
summary(fit)
